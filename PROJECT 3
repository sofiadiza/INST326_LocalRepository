from datetime import datetime, timedelta

class Caregiver:
    def __init__(self, name, phone, email, pay_rate=20.0):
        self.name = name
        self.phone = phone
        self.email = email
        self.pay_rate = pay_rate
        self.hours = 0  # Total assigned hours
        self.availability = {}  # Key: (date, shift), Value: 'preferred', 'available', 'unavailable'
        self.assigned_shifts = []  # List of (date, shift)

    def set_availability(self, date, shift, status):
        self.availability[(date, shift)] = status

    def get_availability(self, date, shift):
        return self.availability.get((date, shift), 'available')

    def assign_shift(self, date, shift):
        self.assigned_shifts.append((date, shift))
        self.hours += 6  # Each shift is 6 hours

class Scheduler:
    def __init__(self, caregivers, start_date, end_date):
        self.caregivers = caregivers  # List of Caregiver instances
        self.start_date = start_date
        self.end_date = end_date
        self.schedule = {}  # Key: (date, shift), Value: assigned Caregiver

    def generate_schedule(self):
        current_date = self.start_date
        while current_date <= self.end_date:
            for shift in ['AM', 'PM']:
                # Collect caregivers who are available for this date and shift
                available_caregivers = []
                for caregiver in self.caregivers:
                    availability = caregiver.get_availability(current_date, shift)
                    if availability != 'unavailable':
                        available_caregivers.append((availability, caregiver))
                if available_caregivers:
                    # Sort by availability status ('preferred' first)
                    available_caregivers.sort(key=lambda x: {'preferred': 0, 'available': 1}[x[0]])
                    assigned_caregiver = available_caregivers[0][1]
                    self.schedule[(current_date, shift)] = assigned_caregiver
                    assigned_caregiver.assign_shift(current_date, shift)
                else:
                    self.schedule[(current_date, shift)] = None  # No caregiver assigned
            current_date += timedelta(days=1)

    def display_schedule(self):
        print("Care Schedule:")
        for date_shift, caregiver in sorted(self.schedule.items()):
            date, shift = date_shift
            date_str = date.strftime('%Y-%m-%d')
            caregiver_name = caregiver.name if caregiver else 'Unassigned'
            print(f"{date_str} {shift} Shift: {caregiver_name}")

class PayReport:
    def __init__(self, caregivers, start_date, end_date):
        self.caregivers = caregivers
        self.start_date = start_date
        self.end_date = end_date

    def generate_report(self):
        current_date = self.start_date
        week_number = 1
        while current_date <= self.end_date:
            week_start = current_date
            week_end = min(week_start + timedelta(days=6), self.end_date)
            print(f"\nWeek {week_number} ({week_start.strftime('%Y-%m-%d')} to {week_end.strftime('%Y-%m-%d')}):")
            for caregiver in self.caregivers:
                # Calculate hours worked in this week
                week_hours = sum(
                    6 for date, shift in caregiver.assigned_shifts
                    if week_start <= date <= week_end
                )
                gross_pay = week_hours * caregiver.pay_rate
                print(f"  {caregiver.name}: Hours: {week_hours}, Gross Pay: ${gross_pay:.2f}")
            current_date = week_end + timedelta(days=1)
            week_number += 1
        # Monthly totals
        print("\nMonthly Totals:")
        for caregiver in self.caregivers:
            gross_pay = caregiver.hours * caregiver.pay_rate
            print(f"{caregiver.name}: Hours: {caregiver.hours}, Gross Pay: ${gross_pay:.2f}")

# Main script
if __name__ == "__main__":
    # Create caregivers
    caregivers = [
        Caregiver("Alice", "555-1234", "alice@example.com"),
        Caregiver("Bob", "555-2345", "bob@example.com"),
        Caregiver("Carol", "555-3456", "carol@example.com"),
        Caregiver("Dave", "555-4567", "dave@example.com"),
        Caregiver("Eve", "555-5678", "eve@example.com"),
        Caregiver("Frank", "555-6789", "frank@example.com"),
        Caregiver("Grace", "555-7890", "grace@example.com"),
        Caregiver("Heidi", "555-8901", "heidi@example.com"),
    ]

    # Set the scheduling period
    start_date = datetime(2023, 10, 1)
    end_date = datetime(2023, 10, 31)

    # Example availability setup
    current_date = start_date
    while current_date <= end_date:
        day_of_week = current_date.weekday()  # 0=Monday, 6=Sunday
        for caregiver in caregivers:
            if caregiver.name in ["Alice", "Bob"]:
                # Alice and Bob prefer weekdays
                if day_of_week < 5:
                    caregiver.set_availability(current_date, 'AM', 'preferred')
                    caregiver.set_availability(current_date, 'PM', 'preferred')
                else:
                    caregiver.set_availability(current_date, 'AM', 'unavailable')
                    caregiver.set_availability(current_date, 'PM', 'unavailable')
            elif caregiver.name == "Carol":
                # Carol prefers weekends
                if day_of_week >= 5:
                    caregiver.set_availability(current_date, 'AM', 'preferred')
                    caregiver.set_availability(current_date, 'PM', 'preferred')
                else:
                    caregiver.set_availability(current_date, 'AM', 'available')
                    caregiver.set_availability(current_date, 'PM', 'available')
            else:
                # Others are available any time
                caregiver.set_availability(current_date, 'AM', 'available')
                caregiver.set_availability(current_date, 'PM', 'available')
        current_date += timedelta(days=1)

    # Generate the schedule
    scheduler = Scheduler(caregivers, start_date, end_date)
    scheduler.generate_schedule()
    scheduler.display_schedule()

    # Generate the pay report
    pay_report = PayReport(caregivers, start_date, end_date)
    pay_report.generate_report()


Care Schedule:
2023-10-01 AM Shift: Carol
2023-10-01 PM Shift: Carol
2023-10-02 AM Shift: Alice
2023-10-02 PM Shift: Bob
...
Weekly Pay Report:
Week 1 (2023-10-01 to 2023-10-07):
  Alice: Hours: 60, Gross Pay: $1200.00
  Bob: Hours: 60, Gross Pay: $1200.00
  Carol: Hours: 24, Gross Pay: $480.00
  ...
Monthly Totals:
Alice: Hours: 132, Gross Pay: $2640.00
Bob: Hours: 132, Gross Pay: $2640.00
Carol: Hours: 60, Gross Pay: $1200.00
...
